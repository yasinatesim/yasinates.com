{"posts":[{"id":"bec53f0b401d","title":"Google Lighthouse’u Yazılım Geliştirme Sürecimize Nasıl Entegre Ettik ?","thumbnail":"https://cdn-images-1.medium.com/max/800/0*saDvgLGytHF1LkpV.png","description":"Lighthouse, web sayfalarının kalitesini artırmak için kullanılan Google tarafından geliştirilmiş açık kaynak kodlu bir test aracıdır.","content":"","source_website":"medium"},{"id":"dede320f9281","title":"yasinates.com Çok Yakında Yayında","thumbnail":"https://cdn-images-1.medium.com/max/1024/1*_0nqztZ1oZQEdNILB1UhnA.jpeg","description":"Herkese merhaba 😀, kişisel websitem yasinates.com çok yakında yeni arayüzü ile yayına girecek.","content":"","source_website":"medium"},{"id":"d27a1b6ff17a","title":"A’dan Z’ye Typescript","thumbnail":"https://cdn-images-1.medium.com/max/1024/1*9eMyWLYOqU5aqBtVoFoi3Q.jpeg","description":"Typescript, Microsoft tarafından geliştirilen açık kaynak bir programlama dilidir. JavaScript diline katı kurallar eklemeyi sağlar.","content":"","source_website":"medium"},{"id":"761b6289a26b","title":"Bir HTML Preprocessors’u: Pug Js","thumbnail":"https://cdn-images-1.medium.com/max/1024/1*aUNIUIc3Q9QZs-i0Qkkf-Q.png","description":"Pug, HTML içerisinde Javascript yazarak, HTML kodlarını dinamik hale getirmenize olanak tanıyan bit HTML preprocessors’udur.","content":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*aUNIUIc3Q9QZs-i0Qkkf-Q.png\"><figcaption>Bir HTML Preprocessors’u: Pug Js</figcaption></figure><h3>Pug Nedir?</h3>\n<p>Pug, HTML içerisinde Javascript yazarak, HTML kodlarını dinamik hale getirmenize olanak tanıyan bit HTML preprocessors’udur.</p>\n<p>Pug kodları, tarayıcılar tarafından direkt olarak yorumlanamayacağı için kodların derlenmesi ve html çıktısının oluşturulması gerekiyor.</p>\n<p>Eğer hemen pug yazmaya başlamak isterseniz, makalenin kurulum adımını geçerek, <a href=\"https://codepen.io/\">Codepen</a>’i kullanabilirsiniz.</p>\n<h3>Pug Kurulumu</h3>\n<p>Pug’ı kurabilmek için ilk başta bilgisayarımızda <a href=\"https://nodejs.org/en/\">Node Js</a>’in kurulu olması gerekiyor. Ardından terminal üzerinden,</p>\n<pre>npm i -g pug-cli</pre>\n<p>komutunu çalıştıralım.</p>\n<p>Şimdi örnek olarak, terminal üzerinden pug yazmak istediğimiz dizine ilerleyerek, dizinimizde bir <strong>index.pug </strong>oluşturalım ve içerisine,</p>\n<script src=\"https://gist.github.com/yasinatesim/489040a2973d6e15bb2ddee2933dc970.js?file=index.pug\"></script><p>bu kodları yazalım.</p>\n<p>Ardından,</p>\n<pre>pug -w . -o <strong>./html</strong> -P</pre>\n<p>komutunu terminalde çalıştıralım.</p>\n<p>Bu komut ile ana dizinimde bulunan pug dosyaları html’e dönüştürülerek, ana dizindeki <strong>html </strong>klasörüne çıktılandı ve klasör içindeki <strong>index.html </strong>dosyasının içeriği,</p>\n<a href=\"https://medium.com/media/06d4ab60e31e2875c34774cd09008be2/href\">https://medium.com/media/06d4ab60e31e2875c34774cd09008be2/href</a><p>bu şekilde oldu.</p>\n<h3>Pug Kullanımı ve Sözdizimi</h3>\n<h4>1- Açıklama Satırları</h4>\n<h4><strong>HTML çıktısında görünen açıklama satırları</strong></h4>\n<p>HTML çıktısında görünen tekli açıklama satırı</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*vAG0IfRgdv-VyWKpR2njUA.png\"><figcaption>Tekli satırdan oluşan açıklama satırı</figcaption></figure><p>bu şekildedir.</p>\n<p>HTML çıktısında görünen çoklu açıklama satırı ise,</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Q5zH5EOI8zSOtF9B0jUOuQ.png\"><figcaption>Çoklu satırdan oluşan açıklama satırı</figcaption></figure><p>bu şekildedir.</p>\n<p>Çoklu açıklamadan çıkmak için, açıklama satırının girintisinden çıkmak gerekir.</p>\n<h4>HTML çıktısında görünmeyen açıklama satırları</h4>\n<p>Bu açıklama satırları çıktılanan HTML çıktısında görünmez, <strong>sadece .pug dosyalarında görünür</strong>.</p>\n<p>HTML çıktısında görünmeyen tekli açıklama satırı</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*bhK75uLFSgUh_WPGqdz1HA.png\"><figcaption>Tekli satırdan oluşan açıklama satırı</figcaption></figure><p>bu şekildedir.</p>\n<p>HTML çıktısında görünmeyen çoklu açıklama satırı ise,</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*VSJTh3pRKwIgciJU6dz4XQ.png\"><figcaption>Çoklu satırdan oluşan açıklama satırı</figcaption></figure><p>bu şekildedir.</p>\n<p>Çoklu açıklamadan çıkmak için, açıklama satırının girintisinden çıkmak gerekir.</p>\n<h4>2- Özellik (Attribute) Tanımlama</h4>\n<p>HTML etiketinin <strong>sadece text</strong> kısmını yazdıktan sonra parantez içerisine o etiket içerisine tanımlamak istediğimiz özelliği (attribute) yazıyoruz. Birden fazla attribute tanımı yaparken istersek, <strong>virgül(,) </strong>ile ayırabiliriz.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*A9MmADdUaK3lrKGOtHC8qQ.png\"><figcaption>Atrribute Tanımlama</figcaption></figure><h4><strong>2.1- Id ve Class Tanımlama</strong></h4>\n<p>Id ve class’ları tanımlamak için iki ayrı yöntem bulunuyor. Bunlardan ilki; “Özellik (Attribute) Tanımlama” başlığında anlattığım gibi, kincisi ise, tıpkı css yazar gibi class tanımlarında <strong>nokta(.), </strong>id tanımlarında <strong>diyez(#) </strong>işaretinden sonra belirtmek istediğimiz isim. Örneğin;</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Br-plOlbHonY6c8s-i0jhQ.png\"><figcaption>Id ve Class Tanımlama</figcaption></figure><h4>3- Değişken Tanımlama ve Kullanma</h4>\n<p>Pug’da değişken tanımlamak için, tıpkı Javascript dilindeki gibi <strong>const</strong> veya <strong>var </strong>ifadesinden sonra belirlemek istediğimiz değişkenin adını yazıyoruz. Örneğin;</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*dD9jNfSCfAIA2sC8RkMz3A.png\"><figcaption>Değişken Tanımlama</figcaption></figure><p>String bir ifadenin içinde değişken tanımlamak istersek,</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*8DJEo1_psyTBE9Sb6-L04Q.png\"><figcaption>String ifadenin içinde değişken kullanımı</figcaption></figure><h4>4- Döngüler</h4>\n<p><strong>“for” döngüsü</strong></p>\n<p>Örnekteki HTML çıktısında, 3 kez “Liste Elemanı” metnine sahip <strong>li </strong>elemanları oluşacaktır.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*fIV438s-BS_2HFSa34dGMA.png\"><figcaption>For Döngüsü</figcaption></figure><p><strong>“each” döngüsü</strong></p>\n<p>Örnekteki HTML çıktısında, “users” değişkenine tanımlamış olduğumuz dizi elemanları <strong>li </strong>elemanları içerisine yazılacaktır.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*1-Bl6DCZR9NKI5oXl9-rZw.png\"><figcaption>Each Döngüsü</figcaption></figure><h4>5- Koşullu İfadeler</h4>\n<p><strong>“if” koşulu</strong></p>\n<p>Pug içerisinde if koşulunun kullanımı, <strong>Javascript diline benzerdir</strong>.</p>\n<p>Örneğin;</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*K0ru53Y8o3ujmP74DLqQuA.png\"><figcaption>If Koşulu</figcaption></figure><p><strong>“case” koşulu</strong></p>\n<p>Case koşulu, Javascript dilindeki “switch” kullanımına benzerdir. Aradaki farkı bir örnekle inceleyelim.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*WF43mh9IB_P26BN0w8GoSQ.png\"><figcaption>Case koşulu</figcaption></figure><p>Örnekte de görüldüğü gibi, Javascript dilinde kullandığımız <strong>switch </strong>sözcüğü, <strong>case </strong>sözcüğü ile Pug’ın içerinde yer alıyor. Yine Javascript dilinde kullandığımız <strong>switch </strong>içerisindeki koşulu sağlayan <strong>case </strong>sözcüğü Pug içerisinde <strong>when</strong> sözcüğü ile yer alıyor.</p>\n<blockquote>Bu kısıma kadar görmüş olduğumuz kullanımların tamamında istersek, Pug’ın söz dizimine bağlı kalmadan Javascript yazarak da işlemlerimizi gerçekleştirebiliriz. <strong>Pug, Javascript dili içerisindeki çoğu ifadeyi içerisinde barındırır. </strong>Bu yönüyle geliştiricilere, kolaylık sağlar.</blockquote>\n<p>Makalenin bu kısmından sonraki kısımlarda göreceğimiz ifadeler, Pug’a özgü ifadelerdir. Bu özellikleri diğer HTML preprocessors’larında da görebiliriz.</p>\n<h4>6- Kalıtım (Extends) ve Include</h4>\n<p>Örnek bir senaryo olarak, projemizde header, footer ve sidebar adında üç sabit olanımız olsun. Sayfanın içeriği ise dinamik olarak değişken bir alan olsun.</p>\n<p><strong>layout.pug </strong>adında bir dosya oluşturalım ve içerisine;</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*aIuG9H9SLfj39r0AaEFolA.png\"><figcaption>Dosya Linki: <a href=\"https://github.com/yasinatesim/medium-stories/blob/master/01-bir-html-preprocessors-u-pug-js/kalitim-extends-ve-include/layout.pug\">layout.pug</a></figcaption></figure><p>bu kodları yazalım.</p>\n<p><strong>include </strong>ile belirttiğimiz kısımlar layout dosyası ile aynı dizinde bulunan sabit <strong>header.pug, sidebar.pug </strong>ve <strong>footer.pug </strong>dosyalarıdır. <strong>block</strong> ile belirttiğimiz kısım ise diğer dosyalar tarafından değiştirilmesine (extend edilmesine) izin verdiğimiz kısımdır. Yani, <strong>index.pug </strong>adında bir dosya oluşturup, içerisine bu dosyadan extend edildiğini belirtirsek, içeriğin dinamik olarak değişmesini sağlayabiliriz.Örneğin;</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*XGATpS0ejimp3IR2S1QcBw.png\"><figcaption>Dosya Linki: <a href=\"https://github.com/yasinatesim/medium-stories/blob/master/01-bir-html-preprocessors-u-pug-js/kalitim-extends-ve-include/index.pug\">index.pug</a></figcaption></figure><p><strong>include </strong>ve<strong> extends </strong>ifadelerini kullanırken, dosya uzantısı belirtmek zorunlu değildir. Yapılan örneklerde dosya uzantısı belirtilmediğini göreceksiniz.</p>\n<h4>7- Mixins</h4>\n<p>Sürekli olarak kullandığımız kodları bir mixin haline getirerek, bir yerde değişiklik olunca heryerde değişmesini sağlayabilir ve component bazlı geliştirme yapabiliriz.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*VZG0uW6L6cmjJvt0gU4xAg.png\"><figcaption>Mixins</figcaption></figure><h3>Sonuç</h3>\n<p>Javascript diline kardeş olan Pug hakkındaki düşüncülerim, okunması zor olan HTML kodlarını basite indirgiyor ve içerisinde, Javascript dili ile geliştirme yapmamıza olanak sağladığı için, işimizi kolaylaştırıyor.</p>\n<p>Bu makalede kullandığım resimlere ve paylaşmış olduğum bazı kaynak kodlara, makale içerisinde bırakmış olduğum resimlerin altındaki linkler üzerinden ulaşabilirsiniz.</p>\n<p>Bu linklerin tamamını görüntülemek için: <a href=\"https://github.com/yasinatesim/medium-stories/blob/master/01-bir-html-preprocessors-u-pug-js/readme.md\">https://github.com/yasinatesim/medium-stories/blob/master/01-bir-html-preprocessors-u-pug-js/</a></p>\n<p>linkini takip edebilirsiniz.</p>\n<p>Makaleyi hazırlarken kullandığım kaynaklar;</p>\n<p>Pug Documentation: <a href=\"https://pugjs.org/api/getting-started.html\">https://pugjs.org/api/getting-started.html</a></p>\n<p>A Beginner’s Guide to Pug: <a href=\"https://www.sitepoint.com/a-beginners-guide-to-pug/\">https://www.sitepoint.com/a-beginners-guide-to-pug/</a></p>\n\n,\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*aUNIUIc3Q9QZs-i0Qkkf-Q.png\"><figcaption>Bir HTML Preprocessors’u: Pug Js</figcaption></figure><h3>Pug Nedir?</h3>\n<p>Pug, HTML içerisinde Javascript yazarak, HTML kodlarını dinamik hale getirmenize olanak tanıyan bit HTML preprocessors’udur.</p>\n<p>Pug kodları, tarayıcılar tarafından direkt olarak yorumlanamayacağı için kodların derlenmesi ve html çıktısının oluşturulması gerekiyor.</p>\n<p>Eğer hemen pug yazmaya başlamak isterseniz, makalenin kurulum adımını geçerek, <a href=\"https://codepen.io/\">Codepen</a>’i kullanabilirsiniz.</p>\n<h3>Pug Kurulumu</h3>\n<p>Pug’ı kurabilmek için ilk başta bilgisayarımızda <a href=\"https://nodejs.org/en/\">Node Js</a>’in kurulu olması gerekiyor. Ardından terminal üzerinden,</p>\n<pre>npm i -g pug-cli</pre>\n<p>komutunu çalıştıralım.</p>\n<p>Şimdi örnek olarak, terminal üzerinden pug yazmak istediğimiz dizine ilerleyerek, dizinimizde bir <strong>index.pug </strong>oluşturalım ve içerisine,</p>\n<a href=\"https://medium.com/media/9fdea4445679d6470c276323fce598ff/href\">https://medium.com/media/9fdea4445679d6470c276323fce598ff/href</a><p>bu kodları yazalım.</p>\n<p>Ardından,</p>\n<pre>pug -w . -o <strong>./html</strong> -P</pre>\n<p>komutunu terminalde çalıştıralım.</p>\n<p>Bu komut ile ana dizinimde bulunan pug dosyaları html’e dönüştürülerek, ana dizindeki <strong>html </strong>klasörüne çıktılandı ve klasör içindeki <strong>index.html </strong>dosyasının içeriği,</p>\n<script src=\"https://gist.github.com/yasinatesim/489040a2973d6e15bb2ddee2933dc970.js?file=index.html\"></script><p>bu şekilde oldu.</p>\n<h3>Pug Kullanımı ve Sözdizimi</h3>\n<h4>1- Açıklama Satırları</h4>\n<h4><strong>HTML çıktısında görünen açıklama satırları</strong></h4>\n<p>HTML çıktısında görünen tekli açıklama satırı</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*vAG0IfRgdv-VyWKpR2njUA.png\"><figcaption>Tekli satırdan oluşan açıklama satırı</figcaption></figure><p>bu şekildedir.</p>\n<p>HTML çıktısında görünen çoklu açıklama satırı ise,</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Q5zH5EOI8zSOtF9B0jUOuQ.png\"><figcaption>Çoklu satırdan oluşan açıklama satırı</figcaption></figure><p>bu şekildedir.</p>\n<p>Çoklu açıklamadan çıkmak için, açıklama satırının girintisinden çıkmak gerekir.</p>\n<h4>HTML çıktısında görünmeyen açıklama satırları</h4>\n<p>Bu açıklama satırları çıktılanan HTML çıktısında görünmez, <strong>sadece .pug dosyalarında görünür</strong>.</p>\n<p>HTML çıktısında görünmeyen tekli açıklama satırı</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*bhK75uLFSgUh_WPGqdz1HA.png\"><figcaption>Tekli satırdan oluşan açıklama satırı</figcaption></figure><p>bu şekildedir.</p>\n<p>HTML çıktısında görünmeyen çoklu açıklama satırı ise,</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*VSJTh3pRKwIgciJU6dz4XQ.png\"><figcaption>Çoklu satırdan oluşan açıklama satırı</figcaption></figure><p>bu şekildedir.</p>\n<p>Çoklu açıklamadan çıkmak için, açıklama satırının girintisinden çıkmak gerekir.</p>\n<h4>2- Özellik (Attribute) Tanımlama</h4>\n<p>HTML etiketinin <strong>sadece text</strong> kısmını yazdıktan sonra parantez içerisine o etiket içerisine tanımlamak istediğimiz özelliği (attribute) yazıyoruz. Birden fazla attribute tanımı yaparken istersek, <strong>virgül(,) </strong>ile ayırabiliriz.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*A9MmADdUaK3lrKGOtHC8qQ.png\"><figcaption>Atrribute Tanımlama</figcaption></figure><h4><strong>2.1- Id ve Class Tanımlama</strong></h4>\n<p>Id ve class’ları tanımlamak için iki ayrı yöntem bulunuyor. Bunlardan ilki; “Özellik (Attribute) Tanımlama” başlığında anlattığım gibi, kincisi ise, tıpkı css yazar gibi class tanımlarında <strong>nokta(.), </strong>id tanımlarında <strong>diyez(#) </strong>işaretinden sonra belirtmek istediğimiz isim. Örneğin;</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Br-plOlbHonY6c8s-i0jhQ.png\"><figcaption>Id ve Class Tanımlama</figcaption></figure><h4>3- Değişken Tanımlama ve Kullanma</h4>\n<p>Pug’da değişken tanımlamak için, tıpkı Javascript dilindeki gibi <strong>const</strong> veya <strong>var </strong>ifadesinden sonra belirlemek istediğimiz değişkenin adını yazıyoruz. Örneğin;</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*dD9jNfSCfAIA2sC8RkMz3A.png\"><figcaption>Değişken Tanımlama</figcaption></figure><p>String bir ifadenin içinde değişken tanımlamak istersek,</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*8DJEo1_psyTBE9Sb6-L04Q.png\"><figcaption>String ifadenin içinde değişken kullanımı</figcaption></figure><h4>4- Döngüler</h4>\n<p><strong>“for” döngüsü</strong></p>\n<p>Örnekteki HTML çıktısında, 3 kez “Liste Elemanı” metnine sahip <strong>li </strong>elemanları oluşacaktır.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*fIV438s-BS_2HFSa34dGMA.png\"><figcaption>For Döngüsü</figcaption></figure><p><strong>“each” döngüsü</strong></p>\n<p>Örnekteki HTML çıktısında, “users” değişkenine tanımlamış olduğumuz dizi elemanları <strong>li </strong>elemanları içerisine yazılacaktır.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*1-Bl6DCZR9NKI5oXl9-rZw.png\"><figcaption>Each Döngüsü</figcaption></figure><h4>5- Koşullu İfadeler</h4>\n<p><strong>“if” koşulu</strong></p>\n<p>Pug içerisinde if koşulunun kullanımı, <strong>Javascript diline benzerdir</strong>.</p>\n<p>Örneğin;</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*K0ru53Y8o3ujmP74DLqQuA.png\"><figcaption>If Koşulu</figcaption></figure><p><strong>“case” koşulu</strong></p>\n<p>Case koşulu, Javascript dilindeki “switch” kullanımına benzerdir. Aradaki farkı bir örnekle inceleyelim.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*WF43mh9IB_P26BN0w8GoSQ.png\"><figcaption>Case koşulu</figcaption></figure><p>Örnekte de görüldüğü gibi, Javascript dilinde kullandığımız <strong>switch </strong>sözcüğü, <strong>case </strong>sözcüğü ile Pug’ın içerinde yer alıyor. Yine Javascript dilinde kullandığımız <strong>switch </strong>içerisindeki koşulu sağlayan <strong>case </strong>sözcüğü Pug içerisinde <strong>when</strong> sözcüğü ile yer alıyor.</p>\n<blockquote>Bu kısıma kadar görmüş olduğumuz kullanımların tamamında istersek, Pug’ın söz dizimine bağlı kalmadan Javascript yazarak da işlemlerimizi gerçekleştirebiliriz. <strong>Pug, Javascript dili içerisindeki çoğu ifadeyi içerisinde barındırır. </strong>Bu yönüyle geliştiricilere, kolaylık sağlar.</blockquote>\n<p>Makalenin bu kısmından sonraki kısımlarda göreceğimiz ifadeler, Pug’a özgü ifadelerdir. Bu özellikleri diğer HTML preprocessors’larında da görebiliriz.</p>\n<h4>6- Kalıtım (Extends) ve Include</h4>\n<p>Örnek bir senaryo olarak, projemizde header, footer ve sidebar adında üç sabit olanımız olsun. Sayfanın içeriği ise dinamik olarak değişken bir alan olsun.</p>\n<p><strong>layout.pug </strong>adında bir dosya oluşturalım ve içerisine;</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*aIuG9H9SLfj39r0AaEFolA.png\"><figcaption>Dosya Linki: <a href=\"https://github.com/yasinatesim/medium-stories/blob/master/01-bir-html-preprocessors-u-pug-js/kalitim-extends-ve-include/layout.pug\">layout.pug</a></figcaption></figure><p>bu kodları yazalım.</p>\n<p><strong>include </strong>ile belirttiğimiz kısımlar layout dosyası ile aynı dizinde bulunan sabit <strong>header.pug, sidebar.pug </strong>ve <strong>footer.pug </strong>dosyalarıdır. <strong>block</strong> ile belirttiğimiz kısım ise diğer dosyalar tarafından değiştirilmesine (extend edilmesine) izin verdiğimiz kısımdır. Yani, <strong>index.pug </strong>adında bir dosya oluşturup, içerisine bu dosyadan extend edildiğini belirtirsek, içeriğin dinamik olarak değişmesini sağlayabiliriz.Örneğin;</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*XGATpS0ejimp3IR2S1QcBw.png\"><figcaption>Dosya Linki: <a href=\"https://github.com/yasinatesim/medium-stories/blob/master/01-bir-html-preprocessors-u-pug-js/kalitim-extends-ve-include/index.pug\">index.pug</a></figcaption></figure><p><strong>include </strong>ve<strong> extends </strong>ifadelerini kullanırken, dosya uzantısı belirtmek zorunlu değildir. Yapılan örneklerde dosya uzantısı belirtilmediğini göreceksiniz.</p>\n<h4>7- Mixins</h4>\n<p>Sürekli olarak kullandığımız kodları bir mixin haline getirerek, bir yerde değişiklik olunca heryerde değişmesini sağlayabilir ve component bazlı geliştirme yapabiliriz.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*VZG0uW6L6cmjJvt0gU4xAg.png\"><figcaption>Mixins</figcaption></figure><h3>Sonuç</h3>\n<p>Javascript diline kardeş olan Pug hakkındaki düşüncülerim, okunması zor olan HTML kodlarını basite indirgiyor ve içerisinde, Javascript dili ile geliştirme yapmamıza olanak sağladığı için, işimizi kolaylaştırıyor.</p>\n<p>Bu makalede kullandığım resimlere ve paylaşmış olduğum bazı kaynak kodlara, makale içerisinde bırakmış olduğum resimlerin altındaki linkler üzerinden ulaşabilirsiniz.</p>\n<p>Bu linklerin tamamını görüntülemek için: <a href=\"https://github.com/yasinatesim/medium-stories/blob/master/01-bir-html-preprocessors-u-pug-js/readme.md\">https://github.com/yasinatesim/medium-stories/blob/master/01-bir-html-preprocessors-u-pug-js/</a></p>\n<p>linkini takip edebilirsiniz.</p>\n<p>Makaleyi hazırlarken kullandığım kaynaklar;</p>\n<p>Pug Documentation: <a href=\"https://pugjs.org/api/getting-started.html\">https://pugjs.org/api/getting-started.html</a></p>\n<p>A Beginner’s Guide to Pug: <a href=\"https://www.sitepoint.com/a-beginners-guide-to-pug/\">https://www.sitepoint.com/a-beginners-guide-to-pug/</a></p>\n\n","source_website":"medium"},{"id":"360103","title":"yasinates.com is coming soon 😋","thumbnail":"https://res.cloudinary.com/practicaldev/image/fetch/s--dR_DndOD--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/xk5a6aaf0vqi555egtxg.jpg","description":"Hello everyone 😀, this is my first post.   I will share the English of my articles on medium.com here...","content":"<p>Hello everyone 😀, this is my first post. </p>\n\n<p>I will share the English of my articles on <a href=\"https://medium.com/@yasinatesim/\">medium.com</a> here.</p>\n\n<p>I create the data on my website using the DEV API, medium.com API, and Github API services 😎</p>\n\n<p>I will write my next article is about the publishing process of my website.</p>\n\n<p>Hope to see you in new articles. 👋 👋</p>\n\n<p>My medium profile: <a href=\"https://medium.com/@yasinatesim/\">medium.com/@yasinatesim/</a></p>\n\n<p>My personal website: <a href=\"http://yasinates.com/\">yasinates.com</a></p>\n\n","source_website":"dev"}]}