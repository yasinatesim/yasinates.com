{"posts":[{"id":"7681d4caeb25","title":"Websitenize Dalgalı Efektli Divider’lar Ekleyin","thumbnail":"https://cdn-images-1.medium.com/max/1024/1*_zmkNzO7rJj3MaeJFjP2wg.png","description":"Son zamanlarda web tasarımlarında en çok kullanılan separator çeşidi, shape divider’lar.","content":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*_zmkNzO7rJj3MaeJFjP2wg.png\"><figcaption>Dalgalı Separator</figcaption></figure><p>Son zamanlarda web tasarımlarında en çok kullanılan separator çeşidi, shape divider’lar.</p>\n<p>Bu makalede kolayca shape divider ekleyebilmenize olanak tanıyan <a href=\"https://www.shapedivider.app/\">shapedivider.app</a>‘den bahsedeceğim ve bu uygulama hayatımızda yokken yaşadığımız sorunlardan bahsedeceğim. 🥲</p>\n<h3>❓Separator / Divider Nedir ?</h3>\n<p>Websitesi tasarımlarında iki section’ı birbirinden ayırmak için kullanılan yapılara, separator veya divider denir.</p>\n<h3>🤨 Yaşadığımız Problemler Nelerdi ?</h3>\n<p>UI tasarımlarda çokça gördüğümüz shape divider’ları tasarım dosyasından kesip <strong>PNG </strong>formatında, kullanıyorduk.</p>\n<ul>\n<li>Resim <strong>PNG</strong> olduğu için farklı ekran çözünürlüklerinde (responsive) bozulmalar oluyordu.</li>\n<li>PNG resimlerin pixel pixel gözükmesi divider’ın görüntüsünü bozuyordu.</li>\n</ul>\n<h3>🤓 shapedivider.app Problemlere Çözüm Üretebildi mi ?</h3>\n<ul>\n<li>Artık UI tasarımlarda gördüğümüz shape divider vb. divider yapılarını <strong>PNG</strong> olarak kaydedip işlem yapmamıza gerek kalmadı. Şekli oluşturduktan sonra <strong>SVG</strong> olarak kaydedip kullanabiliyoruz.</li>\n<li>Resim <strong>SVG</strong> olduğu için görüntünün pixel pixel gözükmesi sorunu ve farklı ekran çözünürlüklerinde (responsive) yaşadığımız problemlere elveda demiş oluyoruz.</li>\n</ul>\n<h3>📚 Uygulamanın Kullanımı</h3>\n<ul>\n<li>\n<a href=\"https://www.shapedivider.app/\">https://www.shapedivider.app/</a> adresine gidilir.</li>\n<li>Oluşturmak istediğiniz şekil ile alakalı detaylar seçilir ardından arayüz üzerindeki <strong>Download </strong>ikonuna tıklanır.</li>\n<li>Açılan pencerede SVG ve CSS kodları verilmiş, bir de önemli bir not var; SVG elementini bir wrapper (kapsayıcı) içerisine almamız ve</li>\n</ul>\n<pre>position: relative;</pre>\n<p>niteliğini eklememiz gerektiği yazıyor.</p>\n<h3>🎥 Video Eğitim</h3>\n<p>Bu makalenin video eğitimine <a href=\"https://www.linkedin.com/in/didem-k%C3%BCc%C3%BCkkaraaslan-2a2a23140/\">Didem</a>’in <a href=\"https://www.youtube.com/c/codingwithdidem/featured\">YouTube Kanalı</a> üzerinden ulaşabilirsiniz;</p>\n<a href=\"https://medium.com/media/36dcf142ce5b3a6af0f04e7dbe73361e/href\">https://medium.com/media/36dcf142ce5b3a6af0f04e7dbe73361e/href</a><h3>Sonuç</h3>\n<p><a href=\"https://www.shapedivider.app/\">shapedivider.app</a> uygulaması UI tasarımı frontend’e kodlarken hayatımızı kolaylaştıran ve en önemlisi de tasarım programlarında şekli tasarım dosyasından çıkarmak için harcadığımız zamanı bize geri veren, zaman tasarrufu yapmamızı sağlayan güzel uygulamalardan bir tanesi.</p>\n<h3>📬 Geri bildirim</h3>\n<p>Yazı ile ilgili tavsiye, öneri, eleştiri ve düzeltmeleri dikkate alıyorum. İletişime geçmek isterseniz bana <a href=\"https://www.linkedin.com/in/yasinatesim/\">Linkedin</a> üzerinden ulaşabilirsiniz.</p>\n<p>Sevgiyle kalın, Yasin 🤗</p>\n\n","source_website":"medium"},{"id":"bec53f0b401d","title":"Google Lighthouse’u Yazılım Geliştirme Sürecimize Nasıl Entegre Ettik ?","thumbnail":"https://cdn-images-1.medium.com/max/800/0*saDvgLGytHF1LkpV.png","description":"Lighthouse, web sayfalarının kalitesini artırmak için kullanılan Google tarafından geliştirilmiş açık kaynak kodlu bir test aracıdır.","content":"\n<h3>Google Lighthouse’u Yazılım Geliştirme Sürecimize Nasıl Entegre Ettik ?</h3>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/0*saDvgLGytHF1LkpV.png\"><figcaption>Google Lighthouse</figcaption></figure><h3>Lighthouse Nedir ?</h3>\n<p>Lighthouse, web sayfalarının kalitesini artırmak için kullanılan Google tarafından geliştirilmiş açık kaynak kodlu bir test aracıdır.</p>\n<h4>\n<strong>🤨 </strong>Nasıl Lighthouse Ölçümü Yaparım ?</h4>\n<p>Lighthouse Ölçümü yapmanın üç yöntemi bulunuyor;</p>\n<p>👉 <strong>Pagespeed Insights:</strong></p>\n<p>Aşağıdaki bağlantıyı tıklayarak ilgili araca ulaşabilirsiniz.</p>\n<p><a href=\"https://developers.google.com/speed/pagespeed/insights/\">PageSpeed Insights</a></p>\n<p>“Enter a web page URL” metin kutusuna ölçüm yapmak istediğiniz web adresini girdikten sonra “Analyze” butonuna tıklamak.</p>\n<p>👉 <strong>Google Developer Tools:</strong></p>\n<p>Chrome tarayıcısı üzerinden ölçüm yapılacak web adresine giriş yapıldıktan sonra;</p>\n<p>Sağ Tuş &gt; İncele &gt; Lighthouse adımını takip edip, “Generate report” butonuna tıklamak.</p>\n<p>👉 <strong>Google Chrome Extension:</strong></p>\n<p>Aşağıdaki bağlantıyı tıklayarak ilgili araca ulaşabilirsiniz.</p>\n<p><a href=\"https://chrome.google.com/webstore/detail/lighthouse/blipmdconlkpinefehnmjammfjpmpbjk?hl=en\">Lighthouse</a></p>\n<p>Açılan sayfadaki “Chrome’a Ekle” butonuna tıkladıktan sonra Chrome tarayıcısının “Eklentiler” menüsünden ilgili eklentiyi açarak “Generate Report” butonuna tıklamak.</p>\n<h3>Lighthouse Ölçümleri Neden Önemli ?</h3>\n<h4>📊 Kullanıcı Deneyimi (UX - User Experience)</h4>\n<p>Lighthouse yapılan ölçümler ile geliştiricilere kullanıcı deneyimi ile ilgili bilgiler sunar.</p>\n<p>Örneğin;<br>👉 Gözü az gören kullanıcılar için font seçimi ve font renklerinin düzgün olması gerektiği,</p>\n<p>👉 Kullanılan fotoğrafların ekran genişliğinden büyük olma-ması gerektiği ile ilgili,</p>\n<p>👉 Sayfada daha az kaynak tüketimi olması için kullanılamayan css, js ve resim dosyalarının kullanıcıya gösterilme-mesi bu sayede internet tüketimini minimuma indirmek ile ilgili,</p>\n<p>👉 Kullanıcı sayfaya ilk girdiğinde sayfada oynayan kısımlar olması ile ilgili</p>\n<p>👉 SEO açısından önem arz eden kısımlar ile ilgili</p>\n<p>bilgileri ve daha fazlasını rapor olarak geliştiriciye sunar.</p>\n<p>Geliştirici ise artık elinde kullanıcı için önem arz eden bazı veriler bulunduğu için ilgili verileri kullanarak bunları yazılım geliştirme sürecine ekler ve böylece daha iyi bir kullanıcı deneyimi elde etmiş olur.</p>\n<p>❓Gelelim Lighthouse’u yazılım geliştirme sürecimize nasıl entegre ettiğimiz sorusuna. Bu soruyu yanıtlamadan önce bilmemiz gereken bir kaç kavram var;</p>\n<h3>🤓 Pipeline Nedir ?</h3>\n<p>Pipeline, birden fazla ardışık talimatların gerçekleştirildiği yapılara denir.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*rNsDJSN7K7xhkqfYiEAX1g.png\"><figcaption>Pipeline Nedir ?</figcaption></figure><h3>🤏 Önceki Pipeline Sürecimiz Nasıldı ?</h3>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*1ljn7QM_oyMLVAmbBCGosw.png\"><figcaption>Önceki Pipeline Sürecimiz</figcaption></figure><p>Çalışma yaptığımız projenin a<strong>na branchinden (master)</strong>, bir <strong>geliştirme branchi</strong> türeterek geliştirmelerimizi yaptıktan sonra eğer bir problem yok ise geliştirme branchini<strong> test ortamına</strong> ilerletiyoruz. Test ortamında da bir problem yok ise geliştirme barnchi projenin ana branchi olan <strong>master branchine merge </strong>ediyoruz.</p>\n<h3>🤔 Yaşadığımız Sorunlar Nelerdi ?</h3>\n<p>Bu anlatmış olduğu süreçte otomatik çalışan bir otomasyon bulunmadığı için bazı sorunlar yaşıyorduk;<br>👉 Yapılan herhangi bir geliştirme sonrasında Lighthouse’da performans puanımız düşünce haberimiz olmuyordu.</p>\n<p>👉 Her geliştirme branchi için manuel olarak Lighthouse raporu alıp, test yapmamız gerekiyordu.</p>\n<p>👉 Ligthouse raporu sonucu her ölçüm yapıldığında farklı çıkabiliyor. Bu durum bizi yanıltıyordu.</p>\n<p>Yaşadığımız bu sorunları çözmek için pipeline sürecimize yeni bir katman daha ekleyerek süreci otomatize ettik.</p>\n<h4>🥸 Yeni Pipeline Sürecimiz Nasıl ?</h4>\n<p>Kullandığımız pipeline sürecimize yeni bir katman daha ekledik.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*2H2O1XBf4lmGhanLjWtJgg.jpeg\"><figcaption>Yeni Pipeline Sürecimiz</figcaption></figure><h4>🤔 Pipeline’a Eklenen Yeni Lighthouse Katmanı Ne Yapıyor ?</h4>\n<p>👉 <strong>Birden fazla Lighthouse puanı alarak puan ortalamasını raporlama:</strong></p>\n<p>Bu sayede hem süreci otomatize etmiş hem de birden fazla Lighthouse puanı alındığında <strong><em>her ölçümde farklı sonuçlar çıkma sorununu</em></strong> çözmüş olduk.</p>\n<p>👉 <strong>Geçmiş döneme ait olan Lighthouse raporlarının kaydedilmesi:</strong></p>\n<p>Bu sayede geçmiş dönemlerdeki puanlarımız ile şu anki puanlarımız arasındaki farkı raporlayarak <strong><em>geçmişte ne tip geliştirmeler yapmıştık? </em></strong>ve<strong><em> bu geliştirmeler sonucunda puanımız yükselmiş miydi? </em></strong>gibi sorulara önceden yanıt verip, daha iyi geliştirme yapabilmek için <strong>doğru</strong> araştırmalar yapıyoruz.</p>\n<p>👉 Lighthouse puanımız düştüğünde bildirim / mail aracılığı ile haberdar oluyor ve yapılan geliştirmeye hemen müdahale ediyoruz.</p>\n<h3>Sonuç</h3>\n<p>Google’ın açık kaynak olarak geliştirmiş olduğu Lighthouse tool’u kullanıcı deneyimi açısından bize bazı veriler sunuyor. Biz de bu verileri kullandığımız yazılım geliştirme sürecine ekleyerek hem sürecimizi otomatize etmiş oluyoruz hem de kullanıcı deneyimi için önem arz eden geliştirmelerin dikkatimizden kaçmasının önüne geçmiş oluyoruz.</p>\n<h3>📬 Geri bildirim</h3>\n<p>Yazı ile ilgili tavsiye, öneri, eleştiri ve düzeltmeleri dikkate alıyorum. İletişime geçmek isterseniz bana <a href=\"https://www.linkedin.com/in/yasinatesim/\">Linkedin</a> üzerinden ulaşabilirsiniz</p>\n<p>Sevgiyle kalın, Yasin 🤗</p>\n<hr>\n<p><a href=\"https://medium.com/hepsiburadatech/google-lighthouseu-yaz%C4%B1l%C4%B1m-geli%C5%9Ftirme-s%C3%BCrecimize-nas%C4%B1l-entegre-ettik-bec53f0b401d\">Google Lighthouse’u Yazılım Geliştirme Sürecimize Nasıl Entegre Ettik ?</a> was originally published in <a href=\"https://medium.com/hepsiburadatech\">hepsiburadatech</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n","source_website":"medium"},{"id":"dede320f9281","title":"yasinates.com Çok Yakında Yayında","thumbnail":"https://cdn-images-1.medium.com/max/1024/1*_0nqztZ1oZQEdNILB1UhnA.jpeg","description":"Herkese merhaba 😀, kişisel websitem yasinates.com çok yakında yeni arayüzü ile yayına girecek.","content":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*_0nqztZ1oZQEdNILB1UhnA.jpeg\"><figcaption><a href=\"http://yasinates.com/\">yasinates.com</a></figcaption></figure><p>Herkese merhaba 😀, kişisel websitem <a href=\"http://yasinates.com/\">yasinates.com</a> çok yakında yeni arayüzü ile yayına girecek.</p>\n<p>Web sitemdeki verileri DEV API, medium.com API ve Github API hizmetlerini kullanarak oluşturuyorum. 😎</p>\n<p>Burada yazmış olduğum makalelerin İngilizce versiyonlarına <a href=\"https://dev.to/yasinatesim\">dev.to</a> profilimden ulaşabilirsiniz.</p>\n<p>Bir sonraki makalemde websitemi yayına alma sürecinden bahsedeceğim.</p>\n<p>Yeni makalelerde görüşmek dileğiyle. 👋</p>\n<p>dev.to Profilim: <a href=\"https://dev.to/yasinatesim\">dev.to/yasinatesim</a></p>\n<p>Kişisel websitem: <a href=\"http://yasinates.com/\">yasinates.com</a></p>\n\n","source_website":"medium"},{"id":"d27a1b6ff17a","title":"A’dan Z’ye Typescript","thumbnail":"https://cdn-images-1.medium.com/max/1024/1*9eMyWLYOqU5aqBtVoFoi3Q.jpeg","description":"Typescript, Microsoft tarafından geliştirilen açık kaynak bir programlama dilidir. JavaScript diline katı kurallar eklemeyi sağlar.","content":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*9eMyWLYOqU5aqBtVoFoi3Q.jpeg\"><figcaption>A’dan Z’ye Typescript</figcaption></figure><h3>Typescript Nedir?</h3>\n<p>Typescript, Microsoft tarafından geliştirilen açık kaynak bir programlama dilidir. JavaScript diline katı kurallar eklemeyi sağlar.</p>\n<h3>Typescript Özellikleri</h3>\n<p>★ <strong>Typescript = Javascript’tir: </strong>Typescript temel yapı taşlarını Javascript’ten alır. Bu nedenle Typescript’i öğrenmeden önce Javascript yetkinliğinizin olması gerekir. Typescript ile yaptığınız bütün geliştirmeleriniz, <em>makalenin kurulum adımında</em> da göreceğiniz üzere Javascript’e dönüştürülür.</p>\n<p>★ <strong>Typescript, tüm Javascript kütüphanelerini destekler: </strong>Typescript ile derlenen javascript çıktısı, bütün javascript kütüphaneleri ile birlikte kullanılabilir.</p>\n<p>★ <strong>Typescript, taşınabilir ve portatiftir: </strong>TypeScript platform-serbest bir dildir ve farklı tarayıcılarda, cihazlarda, işletim sistemlerinde çalışabilir. javascript’in çalıştığı herhangi bir ortamda çalışabilir. Hali hazırda javascript ile geliştirilme yapılan bir projeye entegre edilebilir.</p>\n<h3>Typescript Avantajları</h3>\n<p>★ Typescript, nesne yönelimlidir.</p>\n<p>★ Typescript, statik veri tiplemesine sahiptir.</p>\n<p>★ Typescript, ES6 özelliklerini içeririnde barındırır.</p>\n<p>★ Typescript, modülerdir.</p>\n<p>★ Typescript’in söz dizimi Java, C# gibi yüksek seviyeli dillere benzerdir.</p>\n<p>Typescript kodları, tarayıcılar tarafından direkt olarak yorumlanamayacağı için kodların derlenmesi ve javascript çıktısının oluşturulması gerekiyor.</p>\n<p>Eğer hemen typescript yazmaya başlamak isterseniz, makalenin kurulum adımını geçerek, <a href=\"https://codepen.io/\">Codepen</a>’i veya Typescript’in kendi dokümantasyon sayfasındaki <a href=\"https://www.typescriptlang.org/\">Playground</a>’ı kullanabilirsiniz.</p>\n<h3>Typescript Kurulumu</h3>\n<p>Typescript’i kurabilmek için ilk başta bilgisayarımızda <a href=\"https://nodejs.org/en/\">Node Js</a>’in kurulu olması gerekiyor. Ardından terminal üzerinden,</p>\n<pre>npm install -g typescript</pre>\n<p>komutunu çalıştıralım.</p>\n<p>Şimdi örnek olarak, terminal üzerinden typescript yazmak istediğimiz dizine ilerleyerek, dizinimizde bir <strong>main.ts </strong>oluşturalım ve içerisine,</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/556/1*oOnjxB0OGhrsOgEXy8v0mw.png\"><figcaption>Dosya Linki: <a href=\"https://github.com/yasinatesim/medium-stories/blob/master/02-a-dan-z-ye-typescript/typescript-kurulumu/main.ts\">main.ts</a></figcaption></figure><p>bu kodları yazalım.</p>\n<p>Ardından,</p>\n<pre>tsc main.ts -w</pre>\n<p>komutunu terminalde çalıştıralım.</p>\n<p>Bu komut ile ana dizinimde bulunan <strong>main.ts</strong> dosyası javascript’e dönüştürülerek, ana dizine çıktılandı ve ana dizindeki <strong>main.js </strong>dosyasının içeriği,</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/456/1*cCS83D3i4IIgmKi-GDXDmg.png\"><figcaption>Dosya Linki: <a href=\"https://github.com/yasinatesim/medium-stories/blob/master/02-a-dan-z-ye-typescript/typescript-kurulumu/main.js\">main.js</a></figcaption></figure><p>bu şekilde oldu.</p>\n<blockquote>\n<strong>-w</strong> parametresi main.ts dosyasıdaki değişikliklerin anlık olarak izleneceği ve dosya içerisindeki kodların anlık olarak main.js dosyasına çıktılanacağı anlamına gelir. Zorunlu bir parametre değildir.</blockquote>\n<p>Bu sayede ilk typescript kodumuzu yazmış ve derlemiş olduk. 🙂</p>\n<h3>Yapılandırma (Configuration) ve Klasör Yapısı</h3>\n<p>Terminalde,</p>\n<pre>tsc --init</pre>\n<p>komutunu çalıştırdıktan sonra. dizinimizde <strong>tsconfig.json </strong>dosyası oluşacaktır. Dizinizimde oluşan config dosyasındaki parametreleri düzenleyerek örnek bir klasör yapısı oluşturalım.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*AiKdv8E3EJrb-BM7e6co-Q.png\"><figcaption>Dosya Linki: <a href=\"https://github.com/yasinatesim/medium-stories/blob/master/02-a-dan-z-ye-typescript/yapilandirma-configuration-ve-klasor-yapisi/tsconfig.json\">tsconfig.json</a></figcaption></figure><p>Bu yapılandırma dosyasına göre, <strong>src </strong>dizini içerisinde yer alan<strong> .ts</strong> dosyalarımız <strong>dist </strong>dizinine çıktılanacaktır.</p>\n<h3>Statik Veri Tiplemesi (Static Type Checking) Nedir?</h3>\n<p>Typescript ile değişkenler, fonksiyonlar, ve fonksiyon parametreleri için <strong>tip kontrolü (type checking)</strong> yapabilirsiniz.</p>\n<h4>Özellikleri</h4>\n<p>★ Tamamen isteğe bağlıdır.</p>\n<p>★ Hataları bulmanıza ve önlemenize yardımcı olur.</p>\n<p>★ Daha açıklayıcı ve okunaklı kod yazmanızı sağlar.</p>\n<h3>Tipler</h3>\n<p>★ <strong>String: </strong>Metinsel veri türleri için kullanılır.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/666/1*5OprU4uC9LrJXy6tMVwXfw.png\"><figcaption>Dosya Linki: <a href=\"https://github.com/yasinatesim/medium-stories/blob/master/02-a-dan-z-ye-typescript/temel-tipler/string.ts\">string.ts</a></figcaption></figure><p>★ <strong>Number: </strong>Sayısal veri türleri için kullanılır. ES6 ile gelen ikili ve sekizli değerleri de destekler.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/698/1*tVdEEpmEDGUr40JRct2wAw.png\"><figcaption>Dosya Linki: <a href=\"https://github.com/yasinatesim/medium-stories/blob/master/02-a-dan-z-ye-typescript/temel-tipler/number.ts\">number.ts</a></figcaption></figure><p>★ <strong>Boolean: </strong>true/false değerler için kullanılır.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/734/1*ueaEdEtnQqrvWddO_BoIWA.png\"><figcaption>Dosya Linki: <a href=\"https://github.com/yasinatesim/medium-stories/blob/master/02-a-dan-z-ye-typescript/temel-tipler/boolean.ts\">boolean.ts</a></figcaption></figure><p>★ <strong>Array: </strong>Dizi tanımlamaları için kullanılır. İki farklı yazım şekli vardır.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/888/1*zk2rzKnBARtT4AXZZRrSyQ.png\"><figcaption>Dosya Linki: <a href=\"https://github.com/yasinatesim/medium-stories/blob/master/02-a-dan-z-ye-typescript/temel-tipler/array.ts\">array.ts</a></figcaption></figure><p>★ <strong>Any: </strong>Bilinmeyen değişken tipleri için kullanılır. Örneğin, dinamik değerler içeren değişkenler için kullanılabilir.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*lyn1g-lRMDNX54uEOhUqdg.png\"><figcaption>Dosya Linki: <a href=\"https://github.com/yasinatesim/medium-stories/blob/master/02-a-dan-z-ye-typescript/temel-tipler/any.ts\">any.ts</a></figcaption></figure><p>★ <strong>Void: </strong>Geriye herhangi bir değer <strong>return</strong> etmeyen fonksiyonlarda ve <strong>null</strong> veya <strong>undefined </strong>değer içeren değişkenlerde kullanılır.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*10VYRj5ZK1TtVFDOL3T9kA.png\"><figcaption>Dosya Linki: <a href=\"https://github.com/yasinatesim/medium-stories/blob/master/02-a-dan-z-ye-typescript/temel-tipler/void.ts\">void.ts</a></figcaption></figure><p>★ <strong>Null: </strong>null<strong> </strong>değer içeren değişkenlerde kullanılır.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/574/1*bcK30V9s3SyOptXzVTCN7w.png\"><figcaption>Dosya Linki: <a href=\"https://github.com/yasinatesim/medium-stories/blob/master/02-a-dan-z-ye-typescript/temel-tipler/null.ts\">null.ts</a></figcaption></figure><p>★ <strong>Undefined: </strong>undefined<strong> </strong>değer içeren değişkenlerde kullanılır.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/810/1*eFdkVUOz_LGSBHa9OorA_Q.png\"><figcaption>Dosya Linki: <a href=\"https://github.com/yasinatesim/medium-stories/blob/master/02-a-dan-z-ye-typescript/temel-tipler/undefined.ts\">undefined.ts</a></figcaption></figure><p>★ <strong>Tuple: </strong>Grup türleri bilinen ancak aynı olması gerekmeyen dizilerde kullanılır.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/846/1*rsz6lblfyIrzHzC4hncp8Q.png\"><figcaption>Dosya Linki: <a href=\"https://github.com/yasinatesim/medium-stories/blob/master/02-a-dan-z-ye-typescript/temel-tipler/tuple.ts\">tuple.ts</a></figcaption></figure><p>★ <strong>Enum: </strong>Obje içerisindeki key’lere veya key değerlerine daha kolay erişmek için kullanılır.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/768/1*7Oc6M8lT-Y2SkVTONEpsrg.png\"><figcaption>Dosya Linki: <a href=\"https://github.com/yasinatesim/medium-stories/blob/master/02-a-dan-z-ye-typescript/temel-tipler/enum/enum-1.ts\">enum-1.ts</a></figcaption></figure><p>Key değerleri, <strong>varsayılan olarak 0'dan başlar</strong> ancak bunu değiştirmek mümkündür.</p>\n<p>Tek bir key’in değerini veya birden fazla key’in değerini değiştirebiliriz. 👌💪</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1020/1*hq2NWx3EozsjqP0ZcH9Kig.png\"><figcaption>Dosya Linki: <a href=\"https://github.com/yasinatesim/medium-stories/blob/master/02-a-dan-z-ye-typescript/temel-tipler/enum/enum-2.ts\">enum-2.ts</a></figcaption></figure><p>Key’lere erişmek için indis numarasını yazmamız yeterli. 😋</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/842/1*uKJ_psMseqWPwsU5mbDakw.png\"><figcaption>Dosya Linki: <a href=\"https://github.com/yasinatesim/medium-stories/blob/master/02-a-dan-z-ye-typescript/temel-tipler/enum/enum-3.ts\">enum-3.ts</a></figcaption></figure><h3>Takma Adlar (Type Alias)</h3>\n<p><strong>type </strong>sözcüğü ile tanımlanan ifadeler, tipleri içerisinde tutar ve bu tipleri birden fazla yerde kullanmamıza olanak tanır. 👌</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*0ViwhQ4CqpOUfulf4XK0TQ.png\"><figcaption>Dosya Linki: <a href=\"https://github.com/yasinatesim/medium-stories/blob/master/02-a-dan-z-ye-typescript/alias/alias.ts\">alias.ts</a></figcaption></figure><p>Yukarıdaki örnekte yer alan <strong>user </strong>alias’ı hem <strong>string</strong> tipindeki değişkenleri hem de <strong>object </strong>tipindeki değişkenler için tip kontrolünü sağlar.</p>\n<h3>Fonskiyonlar</h3>\n<p>★ <strong>Void: </strong>Geriye herhangi bir değer <strong>return</strong> etmeyen fonksiyonlarda kullanılır.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*86GKkerviGtnVOUFQs4O5w.png\"><figcaption>Dosya Linki: <a href=\"https://github.com/yasinatesim/medium-stories/blob/master/02-a-dan-z-ye-typescript/fonksiyonlar/void.ts\">void.ts</a></figcaption></figure><p>★ <strong>Geriye Değer Döndürebilen Fonksiyonlar:</strong></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*KzF3Mc3x8l5IQwayERp3Gg.png\"><figcaption>Dosya Linki: <a href=\"https://github.com/yasinatesim/medium-stories/blob/master/02-a-dan-z-ye-typescript/fonksiyonlar/object.ts\">object.ts</a></figcaption></figure><p>Yukarıdaki örnek, <strong>object </strong>tipinde parametre alan ve geriye <strong>string </strong>tipinde değer döndüren bir fonksiyon kullanım örneğidir.</p>\n<p>★ <strong>Parametresi Zorunlu (Required) Olmayan Fonksiyonlar:</strong></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*YbPR6IjZu9ky5-iZJ5eFaQ.png\"><figcaption>Dosya Linki: <a href=\"https://github.com/yasinatesim/medium-stories/blob/master/02-a-dan-z-ye-typescript/fonksiyonlar/parameters.ts\">parameters.ts</a></figcaption></figure><p>Yukarıdaki örnekte, <strong>action </strong>parametresi ve user objesi içinde gönderilen <strong>age </strong>anahtar kelimesi, zorunlu bir parametre değildir. Fonksiyon çalıştırıldığında bu parametreler gönderilmemiş durumsaysa bu kısım işleme alınmaz.</p>\n<h3>Sınıf Tabanlı Objeler (Class Based Object)</h3>\n<h4>Sınıflar (Classes)</h4>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*CxpirPjY83DufrkIITh-gg.png\"><figcaption>Dosya Linki: <a href=\"https://github.com/yasinatesim/medium-stories/blob/master/02-a-dan-z-ye-typescript/classlar/classlar.ts\">classlar.ts</a></figcaption></figure><p>Yukarıdaki örnektede gördüğümüz üzere, sınıf içerisinde yapılan<strong> değişken tipi tanımlamaları </strong>ve method içerisine gönderilen<strong> parametrelerin tip tanımlamaları</strong>, değişkenler ve fonksiyonlardaki ile <strong>aynıdır</strong>.</p>\n<h4>Soyut Sınıflar (Abstract Classes)</h4>\n<p>Soyut sınıflar,</p>\n<p>★ Kendi instance objesinden türeyemeyen sınıflardır.</p>\n<p>★ Kendisini kullanan başka sınıfların instance’ları aracılığıyla içerisindeki özelliklere erişilmesini sağlayan sınıflardır.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*RJj5a-NEbQokaGJ-d7p1Sw.png\"><figcaption>Dosya Linki: <a href=\"https://github.com/yasinatesim/medium-stories/blob/master/02-a-dan-z-ye-typescript/classlar/abstract-class-1.ts\">abstract-class-1.ts</a></figcaption></figure><p>Eğer soyut bir sınıftan instance üretmeye çalışırsak, hata alırız.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*AbpTIbm2TfCQed6f7wOD6A.png\"><figcaption>Dosya Linki: <a href=\"https://github.com/yasinatesim/medium-stories/blob/master/02-a-dan-z-ye-typescript/classlar/abstract-class-2.ts\">abstract-class-2.ts</a></figcaption></figure><p>Yukarıdaki örnekte, Person sınıfı instance’ından türetilen obje ile <strong>hem Person</strong> sınıfı içindeki parametrelere <strong>hem de</strong> <strong>User</strong> sınıfı içindeki parametrelere erişilebilir.</p>\n<h3>Interface</h3>\n<p>Dışarıdan erişilebilir durumda olan elemanları, objelere veya sınıflara bildiren yapılardır.</p>\n<p>★ Birbirlerinden extend olabilirler.</p>\n<p>★ Birbirlerinden implement olamazlar.</p>\n<p>★ Objelere ve sınıflara atanabilirler.</p>\n<h4><strong>Objelerde Kullanımı</strong></h4>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/758/1*s7esBzbHoAXhVqXxy2qw8w.png\"><figcaption>Dosya Linki: <a href=\"https://github.com/yasinatesim/medium-stories/blob/master/02-a-dan-z-ye-typescript/interface/with-object.ts\">with-object.ts</a></figcaption></figure><p>Yukarıdaki örnekte, <strong>age </strong>değeri obje içerisinde kullanımı zorunlu bir parametre olmadığı için <strong>soru işareti (?) </strong>ile birlikte kullanılmıştır.</p>\n<h4><strong>Sınıflarda Kullanımı</strong></h4>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Ls9hK9q39OJlyOyy5T0VRw.png\"><figcaption>Dosya Linki: <a href=\"https://github.com/yasinatesim/medium-stories/blob/master/02-a-dan-z-ye-typescript/interface/with-class.ts\">with-class.ts</a></figcaption></figure><p>Yukarıdaki örnekte, User sınıfı, <strong>IsPerson </strong>Interface’i içinde tanımlanmış olan özellikleri kullanmaktadır.</p>\n<h3>“public”, “private” ve “readonly”</h3>\n<p>★ <strong>public: </strong>Sınıf içerisinde kullanılan özellikleri dışarıdan <strong>erişilebilir </strong>ve<strong> değiştirilebilir </strong>hale getirir.</p>\n<p>★ <strong>private: </strong>Sınıf içerisinde kullanılan özelliklerin dışarıdan<strong> erişilebilme </strong>ve <strong>değiştirilebilme </strong>durumunu<strong> devre dışı</strong> bırakır.</p>\n<p>★ <strong>readonly: </strong>Sınıf veya Interface içerisinde kullanılan özelliklerin dışarıdan <strong>değiştirilebilme</strong> durumunu devre dışı bırakır.</p>\n<p><strong>Interface’lerde Kullanımı</strong></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*90dOiR9etTVLmY-bR6_vLg.png\"><figcaption>Dosya Linki: <a href=\"https://github.com/yasinatesim/medium-stories/blob/master/02-a-dan-z-ye-typescript/public-private-readonly/read-only-with-interface.ts\">read-only-with-interface.ts</a></figcaption></figure><p><strong>Sınıflarda Kullanımı</strong></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*iFv2O3zffx0PJBHlMPKonQ.png\"><figcaption>Dosya Linki: <a href=\"https://github.com/yasinatesim/medium-stories/blob/master/02-a-dan-z-ye-typescript/public-private-readonly/read-only-with-class.ts\">read-only-with-class.ts</a></figcaption></figure><p>Sınıf veya obje içerisindeki <strong>readonly</strong> değerleri değiştirmeye çalışırsak, hata alırız.</p>\n<h3>Sonuç</h3>\n<p>Javascript diline katı kurallar eklememize yardımcı olan Typescript, ilk başlarda göze biraz tuhaf gözükse de alıştıktan sonra geliştirme esnasında karşımıza çıkardığı hata mesajlarıyla hayatımızı kolaylaştırıyor.</p>\n<p>Bu makalede kullandığım resimlere ve paylaşmış olduğum kaynak kodlara, makale içerisinde bırakmış olduğum resimlerin altındaki linkler üzerinden ulaşabilirsiniz.</p>\n<p>Bu linklerin tamamını görüntülemek için: <a href=\"https://github.com/yasinatesim/medium-stories/tree/master/02-a-dan-z-ye-typescript\">https://github.com/yasinatesim/medium-stories/tree/master/02-a-dan-z-ye-typescript</a></p>\n<p>linkini takip edebilirsiniz.</p>\n<p>Makaleyi hazırlarken kullandığım kaynaklar;</p>\n<p>Typescript Documentation: <a href=\"https://www.typescriptlang.org/\">https://typescriptlang.org</a></p>\n<p>The Net Ninja: <a href=\"https://www.youtube.com/watch?v=2pZmKW9-I_k&amp;list=PL4cUxeGkcC9gUgr39Q_yD6v-bSyMwKPUI\">https://www.youtube.com/watch?v=2pZmKW9-I_k&amp;list=PL4cUxeGkcC9gUgr39Q_yD6v-bSyMwKPUI</a></p>\n<p>Traversy Media: <a href=\"https://www.youtube.com/watch?v=rAy_3SIqT-E\">https://www.youtube.com/watch?v=rAy_3SIqT-E</a></p>\n\n","source_website":"medium"},{"id":"761b6289a26b","title":"Bir HTML Preprocessors’u: Pug Js","thumbnail":"https://cdn-images-1.medium.com/max/1024/1*aUNIUIc3Q9QZs-i0Qkkf-Q.png","description":"Pug, HTML içerisinde Javascript yazarak, HTML kodlarını dinamik hale getirmenize olanak tanıyan bit HTML preprocessors’udur.","content":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*aUNIUIc3Q9QZs-i0Qkkf-Q.png\"><figcaption>Bir HTML Preprocessors’u: Pug Js</figcaption></figure><h3>Pug Nedir?</h3>\n<p>Pug, HTML içerisinde Javascript yazarak, HTML kodlarını dinamik hale getirmenize olanak tanıyan bit HTML preprocessors’udur.</p>\n<p>Pug kodları, tarayıcılar tarafından direkt olarak yorumlanamayacağı için kodların derlenmesi ve html çıktısının oluşturulması gerekiyor.</p>\n<p>Eğer hemen pug yazmaya başlamak isterseniz, makalenin kurulum adımını geçerek, <a href=\"https://codepen.io/\">Codepen</a>’i kullanabilirsiniz.</p>\n<h3>Pug Kurulumu</h3>\n<p>Pug’ı kurabilmek için ilk başta bilgisayarımızda <a href=\"https://nodejs.org/en/\">Node Js</a>’in kurulu olması gerekiyor. Ardından terminal üzerinden,</p>\n<pre>npm i -g pug-cli</pre>\n<p>komutunu çalıştıralım.</p>\n<p>Şimdi örnek olarak, terminal üzerinden pug yazmak istediğimiz dizine ilerleyerek, dizinimizde bir <strong>index.pug </strong>oluşturalım ve içerisine,</p>\n<script src=\"https://gist.github.com/yasinatesim/489040a2973d6e15bb2ddee2933dc970.js?file=index.pug\"></script><p>bu kodları yazalım.</p>\n<p>Ardından,</p>\n<pre>pug -w . -o <strong>./html</strong> -P</pre>\n<p>komutunu terminalde çalıştıralım.</p>\n<p>Bu komut ile ana dizinimde bulunan pug dosyaları html’e dönüştürülerek, ana dizindeki <strong>html </strong>klasörüne çıktılandı ve klasör içindeki <strong>index.html </strong>dosyasının içeriği,</p>\n<script src=\"https://gist.github.com/yasinatesim/489040a2973d6e15bb2ddee2933dc970.js?file=index.html\"></script><p>bu şekilde oldu.</p>\n<h3>Pug Kullanımı ve Sözdizimi</h3>\n<h4>1- Açıklama Satırları</h4>\n<h4><strong>HTML çıktısında görünen açıklama satırları</strong></h4>\n<p>HTML çıktısında görünen tekli açıklama satırı</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*vAG0IfRgdv-VyWKpR2njUA.png\"><figcaption>Tekli satırdan oluşan açıklama satırı</figcaption></figure><p>bu şekildedir.</p>\n<p>HTML çıktısında görünen çoklu açıklama satırı ise,</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Q5zH5EOI8zSOtF9B0jUOuQ.png\"><figcaption>Çoklu satırdan oluşan açıklama satırı</figcaption></figure><p>bu şekildedir.</p>\n<p>Çoklu açıklamadan çıkmak için, açıklama satırının girintisinden çıkmak gerekir.</p>\n<h4>HTML çıktısında görünmeyen açıklama satırları</h4>\n<p>Bu açıklama satırları çıktılanan HTML çıktısında görünmez, <strong>sadece .pug dosyalarında görünür</strong>.</p>\n<p>HTML çıktısında görünmeyen tekli açıklama satırı</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*bhK75uLFSgUh_WPGqdz1HA.png\"><figcaption>Tekli satırdan oluşan açıklama satırı</figcaption></figure><p>bu şekildedir.</p>\n<p>HTML çıktısında görünmeyen çoklu açıklama satırı ise,</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*VSJTh3pRKwIgciJU6dz4XQ.png\"><figcaption>Çoklu satırdan oluşan açıklama satırı</figcaption></figure><p>bu şekildedir.</p>\n<p>Çoklu açıklamadan çıkmak için, açıklama satırının girintisinden çıkmak gerekir.</p>\n<h4>2- Özellik (Attribute) Tanımlama</h4>\n<p>HTML etiketinin <strong>sadece text</strong> kısmını yazdıktan sonra parantez içerisine o etiket içerisine tanımlamak istediğimiz özelliği (attribute) yazıyoruz. Birden fazla attribute tanımı yaparken istersek, <strong>virgül(,) </strong>ile ayırabiliriz.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*A9MmADdUaK3lrKGOtHC8qQ.png\"><figcaption>Atrribute Tanımlama</figcaption></figure><h4><strong>2.1- Id ve Class Tanımlama</strong></h4>\n<p>Id ve class’ları tanımlamak için iki ayrı yöntem bulunuyor. Bunlardan ilki; “Özellik (Attribute) Tanımlama” başlığında anlattığım gibi, kincisi ise, tıpkı css yazar gibi class tanımlarında <strong>nokta(.), </strong>id tanımlarında <strong>diyez(#) </strong>işaretinden sonra belirtmek istediğimiz isim. Örneğin;</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Br-plOlbHonY6c8s-i0jhQ.png\"><figcaption>Id ve Class Tanımlama</figcaption></figure><h4>3- Değişken Tanımlama ve Kullanma</h4>\n<p>Pug’da değişken tanımlamak için, tıpkı Javascript dilindeki gibi <strong>const</strong> veya <strong>var </strong>ifadesinden sonra belirlemek istediğimiz değişkenin adını yazıyoruz. Örneğin;</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*dD9jNfSCfAIA2sC8RkMz3A.png\"><figcaption>Değişken Tanımlama</figcaption></figure><p>String bir ifadenin içinde değişken tanımlamak istersek,</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*8DJEo1_psyTBE9Sb6-L04Q.png\"><figcaption>String ifadenin içinde değişken kullanımı</figcaption></figure><h4>4- Döngüler</h4>\n<p><strong>“for” döngüsü</strong></p>\n<p>Örnekteki HTML çıktısında, 3 kez “Liste Elemanı” metnine sahip <strong>li </strong>elemanları oluşacaktır.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*fIV438s-BS_2HFSa34dGMA.png\"><figcaption>For Döngüsü</figcaption></figure><p><strong>“each” döngüsü</strong></p>\n<p>Örnekteki HTML çıktısında, “users” değişkenine tanımlamış olduğumuz dizi elemanları <strong>li </strong>elemanları içerisine yazılacaktır.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*1-Bl6DCZR9NKI5oXl9-rZw.png\"><figcaption>Each Döngüsü</figcaption></figure><h4>5- Koşullu İfadeler</h4>\n<p><strong>“if” koşulu</strong></p>\n<p>Pug içerisinde if koşulunun kullanımı, <strong>Javascript diline benzerdir</strong>.</p>\n<p>Örneğin;</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*K0ru53Y8o3ujmP74DLqQuA.png\"><figcaption>If Koşulu</figcaption></figure><p><strong>“case” koşulu</strong></p>\n<p>Case koşulu, Javascript dilindeki “switch” kullanımına benzerdir. Aradaki farkı bir örnekle inceleyelim.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*WF43mh9IB_P26BN0w8GoSQ.png\"><figcaption>Case koşulu</figcaption></figure><p>Örnekte de görüldüğü gibi, Javascript dilinde kullandığımız <strong>switch </strong>sözcüğü, <strong>case </strong>sözcüğü ile Pug’ın içerinde yer alıyor. Yine Javascript dilinde kullandığımız <strong>switch </strong>içerisindeki koşulu sağlayan <strong>case </strong>sözcüğü Pug içerisinde <strong>when</strong> sözcüğü ile yer alıyor.</p>\n<blockquote>Bu kısıma kadar görmüş olduğumuz kullanımların tamamında istersek, Pug’ın söz dizimine bağlı kalmadan Javascript yazarak da işlemlerimizi gerçekleştirebiliriz. <strong>Pug, Javascript dili içerisindeki çoğu ifadeyi içerisinde barındırır. </strong>Bu yönüyle geliştiricilere, kolaylık sağlar.</blockquote>\n<p>Makalenin bu kısmından sonraki kısımlarda göreceğimiz ifadeler, Pug’a özgü ifadelerdir. Bu özellikleri diğer HTML preprocessors’larında da görebiliriz.</p>\n<h4>6- Kalıtım (Extends) ve Include</h4>\n<p>Örnek bir senaryo olarak, projemizde header, footer ve sidebar adında üç sabit olanımız olsun. Sayfanın içeriği ise dinamik olarak değişken bir alan olsun.</p>\n<p><strong>layout.pug </strong>adında bir dosya oluşturalım ve içerisine;</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*aIuG9H9SLfj39r0AaEFolA.png\"><figcaption>Dosya Linki: <a href=\"https://github.com/yasinatesim/medium-stories/blob/master/01-bir-html-preprocessors-u-pug-js/kalitim-extends-ve-include/layout.pug\">layout.pug</a></figcaption></figure><p>bu kodları yazalım.</p>\n<p><strong>include </strong>ile belirttiğimiz kısımlar layout dosyası ile aynı dizinde bulunan sabit <strong>header.pug, sidebar.pug </strong>ve <strong>footer.pug </strong>dosyalarıdır. <strong>block</strong> ile belirttiğimiz kısım ise diğer dosyalar tarafından değiştirilmesine (extend edilmesine) izin verdiğimiz kısımdır. Yani, <strong>index.pug </strong>adında bir dosya oluşturup, içerisine bu dosyadan extend edildiğini belirtirsek, içeriğin dinamik olarak değişmesini sağlayabiliriz.Örneğin;</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*XGATpS0ejimp3IR2S1QcBw.png\"><figcaption>Dosya Linki: <a href=\"https://github.com/yasinatesim/medium-stories/blob/master/01-bir-html-preprocessors-u-pug-js/kalitim-extends-ve-include/index.pug\">index.pug</a></figcaption></figure><p><strong>include </strong>ve<strong> extends </strong>ifadelerini kullanırken, dosya uzantısı belirtmek zorunlu değildir. Yapılan örneklerde dosya uzantısı belirtilmediğini göreceksiniz.</p>\n<h4>7- Mixins</h4>\n<p>Sürekli olarak kullandığımız kodları bir mixin haline getirerek, bir yerde değişiklik olunca heryerde değişmesini sağlayabilir ve component bazlı geliştirme yapabiliriz.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*VZG0uW6L6cmjJvt0gU4xAg.png\"><figcaption>Mixins</figcaption></figure><h3>Sonuç</h3>\n<p>Javascript diline kardeş olan Pug hakkındaki düşüncülerim, okunması zor olan HTML kodlarını basite indirgiyor ve içerisinde, Javascript dili ile geliştirme yapmamıza olanak sağladığı için, işimizi kolaylaştırıyor.</p>\n<p>Bu makalede kullandığım resimlere ve paylaşmış olduğum bazı kaynak kodlara, makale içerisinde bırakmış olduğum resimlerin altındaki linkler üzerinden ulaşabilirsiniz.</p>\n<p>Bu linklerin tamamını görüntülemek için: <a href=\"https://github.com/yasinatesim/medium-stories/blob/master/01-bir-html-preprocessors-u-pug-js/readme.md\">https://github.com/yasinatesim/medium-stories/blob/master/01-bir-html-preprocessors-u-pug-js/</a></p>\n<p>linkini takip edebilirsiniz.</p>\n<p>Makaleyi hazırlarken kullandığım kaynaklar;</p>\n<p>Pug Documentation: <a href=\"https://pugjs.org/api/getting-started.html\">https://pugjs.org/api/getting-started.html</a></p>\n<p>A Beginner’s Guide to Pug: <a href=\"https://www.sitepoint.com/a-beginners-guide-to-pug/\">https://www.sitepoint.com/a-beginners-guide-to-pug/</a></p>\n\n","source_website":"medium"},{"id":"360103","title":"yasinates.com is coming soon 😋","thumbnail":"https://res.cloudinary.com/practicaldev/image/fetch/s--dR_DndOD--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/xk5a6aaf0vqi555egtxg.jpg","description":"Hello everyone 😀, this is my first post.   I will share the English of my articles on medium.com here...","content":"<p>Hello everyone 😀, this is my first post. </p>\n\n<p>I will share the English of my articles on <a href=\"https://medium.com/@yasinatesim/\">medium.com</a> here.</p>\n\n<p>I create the data on my website using the DEV API, medium.com API, and Github API services 😎</p>\n\n<p>I will write my next article is about the publishing process of my website.</p>\n\n<p>Hope to see you in new articles. 👋 👋</p>\n\n<p>My medium profile: <a href=\"https://medium.com/@yasinatesim/\">medium.com/@yasinatesim/</a></p>\n\n<p>My personal website: <a href=\"http://yasinates.com/\">yasinates.com</a></p>\n\n","source_website":"dev"}]}